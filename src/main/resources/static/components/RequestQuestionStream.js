//import QuestionHandler

// Have RequestAnswerStream component which will listen to Answers
// Here, in the template, render RequestAnswerStream component for each Question
// The role of RequestAnswerStream is to inject template which renders only questions that match the questions identifier
// Question identifier should be generated by the back-end on submission
// Question identifier is passed to the RequestAnswerStream component
import AnswersHandler from './AnswersHandler.js'

export default {
    components: {
        AnswersHandler
    },
    data() {
        return {
            path: "",
            questions: []
        }
    },
    methods: {
        async fetchStream() {
            console.log("Connecting questions listener to room token: " + this.path);
            const stream = fetch("http://localhost:8080/get-questions-by-token?token=" + this.path);
            const onMessage = obj => this.questions.push(obj);
            const onComplete = () => console.log('The stream has completed');

            stream
              .then(readStream(onMessage))
              .then(onComplete);
        }
    },
    created() {
        this.path = window.location.pathname.split('/')[2];
        const person = {
          submittedBy: 'John',
          content: 'What is metonymy?',
          questionToken: '134dsfgt'
        };

        this.questions.push(person);
    },
    mounted() {
        this.fetchStream();
    },
    template: `
        <div class="card" v-for="question in questions">
            <!-- Question space -->
            <div class="question">
                <div class="question-submitted-by" style="background-color: #43506C;">
                    <h2> {{question.submittedBy}} </h2>
                </div>
                <div class="content">
                    <h2><span class="question-number">1. </span>{{question.content}}</h2>
                </div>
            </div>
            <!-- Answers space -->
            <div class="answers">
                <AnswersHandler :path="this.path" :question-token="question.questionToken"/>
            </div>
        </div>
    `
}

/* Read ndjson utility */
/* https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e */
const readStream = processLine => response => {
  const stream = response.body.getReader();
  const matcher = /\r?\n/;
  const decoder = new TextDecoder();
  let buf = '';

  const loop = () =>
    stream.read().then(({ done, value }) => {
      if (done) {
        if (buf.length > 0) processLine(JSON.parse(buf));
      } else {
        const chunk = decoder.decode(value, {
          stream: true
        });
        buf += chunk;

        const parts = buf.split(matcher);
        buf = parts.pop();
        for (const i of parts.filter(p => p)) processLine(JSON.parse(i));
        return loop();
      }
    });

  return loop();
}